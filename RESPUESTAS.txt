Parte I

1. Con el analisis del funcionamiento del código, podemos ver que la clase responsable del uso de CPU es "Producer", ya
que lleva a cabo más procesos (generar un número aleatorio, sumar este número a una variable, añadir a una cola, etc) que
la clase "Consumer", quien solo consulta a una cola y extrae un elemento de esta. (Imagenes del consumo mostrado en
VisualVM en el informe de laboratorio)

2. Para mejorar el rendimiento de la CPU, nos dimos cuenta de que el consumidor siempre debia esperar a que hubiera
elementos dentro de la pila del productor, por lo que planteamos un wait en esta clase con la pila como objeto lock y
un notifyAll una vez que el consumidor haya colocado algún elemento dentro de esta cola.

3. Para hacer que el productor sea lento y el consumidor rapido, esta vez se duerme el consumidor por un segundo cada vez
que consume y ahora el productor no duerme después de agregar un producto a la cola. Para respetar los límites planteamos
un wait cuando se cumple que la longitud de la cola es mayor al stock que es el límite y un notifyAll después de que se
quite un elemento de esta cola en la clase productor.

Parte II

2. El total de la sumatoria de todos los puntos de vida deberia ser N*DEFAULT_IMMORTAL_HEALTH.

3. Cuando se ejecuta el juego y se hace click en el boton de "pause and check", se encuentran datos como las vidas
   de cada inmortal que aún sigue con vida en el juego junto con la sumatoria de los valores de salud de todos los N inmortales
   vivos en ese momento. Cuando hacemos click en el boton, el juego no se detiene y el invariante no se cumple sino que
   este aumenta cada vez que se oprime.

5. El invariante de nuevo no se cumple aunque los botones de "pause and check" y "resume" funcionen.

6. Condiciones de carrera posibles:
    a. Dos inmortales atacan al mismo tiempo a otro y suman valores no correspondientes a la salud de cada uno.
    b. Dos inmortales atacan al mismo tiempo a otro y a este se le resta un valor de salud incorrecto.
    c. Un inmortal ataca, pero al mismo tiempo este es atacado y si tiene un valor pequeño de salud puede morir si
    primero resta su valor de salud en vez de sumar el valor obtenido por el ataque.

7. Al ejecutar el programa y ver el thread dump en visualvm, logramos ver que al final del reporte los hilos vemos que
todos se han quedado esperando simultáneamente. En cada uno hay un mensaje indicando: "waiting for monitor entry"

8. Después de plantear la estrategia probamos con 100 inmortales y el programa no se detuvo. Debido a limitaciones de
nuestros computadores no pudimos probarlo con 1000 y 10000 hilos.

9. Una de las condiciones de carrera que podemos ver para este punto es que al atacar inmortales ya muertos y que también
inmortales muertos ataquen sin salud hace que puedan llegar a revivir, ya que si atacan y ganan suman salud ya cuando
estaban muertos. También puede ser que dos inmortales ataquen al mismo tiempo a uno muerto o uno muerto ataque al mismo
tiempo que uno vivo a un inmortal aparte.
    a. Para solucionar esto, usamos una variable booleana para identificar que cada inmortal esta vivo o muerto. Se le
    da esta variable al crearse y en el metodo fight cuando se vaya a enfrentar a un inmortal y quede con salud 0 no se
    se le va a dar la variable en false para indicar que esta muerto y usar esta variable en el run para que se acabe la
    ejecucion del hilo.

10. Para el boton de stop, usamos otra variable atomica para que con la condicion de si su valor cambia a falso todos los
hilos terminaran su ejecucion y en programa termine. Tambien dehabilitamos a los demas botones cuando se hace clic en stop.